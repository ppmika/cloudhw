AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template with VPC, EC2, S3, Lambda, and custom resource to avoid circular dependency.

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Deployment environment name.

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0021f8361be812b5d

Conditions:
  IsProd: !Equals [ !Ref Environment, prod ]

Resources:

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-vpc"

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-public-subnet"

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-subnet"

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", AMI ]
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-ec2-instance"

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-lambda-trigger-bucket-${AWS::AccountId}-cfstack"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"

  S3LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Code:
        ZipFile: |
          def handler(event, context):
              print("S3 event triggered:", event)
              return {'statusCode': 200, 'body': 'Success'}

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref S3LambdaFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${S3Bucket}"

  CustomLambdaNotificationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CustomNotificationPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutBucketNotification
                Resource: !GetAtt S3Bucket.Arn
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                Resource: !GetAtt S3LambdaFunction.Arn

  CustomS3NotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt CustomLambdaNotificationRole.Arn
      Runtime: python3.12
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import boto3
          import urllib3

          http = urllib3.PoolManager()

          def send_response(event, context, status, data, physical_id=None):
              response_body = {
                  'Status': status,
                  'Reason': 'Check CloudWatch Logs: ' + context.log_stream_name,
                  'PhysicalResourceId': physical_id or context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': data
              }
              encoded = json.dumps(response_body).encode('utf-8')
              headers = {'content-type': '', 'content-length': str(len(encoded))}
              try:
                  http.request('PUT', event['ResponseURL'], body=encoded, headers=headers)
              except Exception as e:
                  print("Failed to send response:", str(e))

          def handler(event, context):
              print("Received event:", json.dumps(event))
              try:
                  s3 = boto3.client('s3')
                  bucket = event['ResourceProperties']['BucketName']
                  function_arn = event['ResourceProperties']['LambdaArn']

                  if event['RequestType'] in ['Create', 'Update']:
                      s3.put_bucket_notification_configuration(
                          Bucket=bucket,
                          NotificationConfiguration={
                              'LambdaFunctionConfigurations': [
                                  {
                                      'LambdaFunctionArn': function_arn,
                                      'Events': ['s3:ObjectCreated:*']
                                  }
                              ]
                          }
                      )
                  elif event['RequestType'] == 'Delete':
                      s3.put_bucket_notification_configuration(
                          Bucket=bucket,
                          NotificationConfiguration={}
                      )

                  send_response(event, context, 'SUCCESS', {})
              except Exception as e:
                  print("Error:", str(e))
                  send_response(event, context, 'FAILED', {'Message': str(e)})

  S3NotificationCustomResource:
    Type: Custom::S3NotificationSetup
    Properties:
      ServiceToken: !GetAtt CustomS3NotificationFunction.Arn
      BucketName: !Ref S3Bucket
      LambdaArn: !GetAtt S3LambdaFunction.Arn

Outputs:
  VPCId:
    Description: The ID of the created VPC
    Value: !Ref MyVPC
  PublicSubnetId:
    Description: The ID of the public subnet
    Value: !Ref PublicSubnet
  EC2InstanceId:
    Description: The ID of the EC2 instance
    Value: !Ref EC2Instance
  S3BucketName:
    Description: The name of the S3 bucket
    Value: !Ref S3Bucket
  LambdaFunctionName:
    Description: The name of the Lambda function
    Value: !Ref S3LambdaFunction
